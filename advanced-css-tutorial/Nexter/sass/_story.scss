.story {
  &__pictures {
    background-image: linear-gradient(
        rgba($color-primary, 0.5),
        rgba($color-primary, 0.5)
      ),
      url(../img/back.jpg);
    background-size: cover;

    // POSITIONING THE STORY__PICTURES IN THE GRID
    // we don't need to specify the rows since the header occupies one row based on the order in the html
    // we have named columns which makes this much easier to understand
    grid-column: full-start / col-end 4;

    display: grid;
    grid-template-rows: repeat(6, 1fr);
    grid-template-columns: repeat(6, 1fr);
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      grid-column: 1 / -1;
      padding: 6rem;
    }
  }

  &__img--1 {
    width: 100%;
    // be aware that images always try to keep the aspect ratio, which means that they possibly won't fully occupy all of the columns / rows
    grid-row: 2 / 6;
    grid-column: 2 / 6;

    box-shadow: 0 2rem 5 rem rgba(#000, 0.1);

    @media only screen and (max-width: $bp-medium) {
      grid-column: 1 / 5;
      grid-row: 1 / -1;
    }
  }

  &__img--2 {
    // by setting the width to be more than 100% of the container we enable the picture to overflow the container for the look we want
    width: 115%;
    z-index: 20;

    grid-row: 4 / 6;
    grid-column: 4 / 7;

    box-shadow: 0 2rem 5 rem rgba(#000, 0.2);

    @media only screen and (max-width: $bp-medium) {
      grid-row: 1 / -1;
      width: 100%;
    }
  }

  &__content {
    background-color: $color-grey-light-1;

    // POSITIONING THE STORY__CONTENT IN THE GRID
    // we don't need to specify the rows since the header occupies one row based on the order in the html
    // we have named columns which makes this much easier to understand
    grid-column: col-start 5 / full-end;

    padding: 6rem 8vw;

    // FLEXBOX ALIGNING METHOD
    /*
    // using flexbox for vertical alignment in this case because it is a one-dimensional layout
    display: flex;
    flex-direction: column;
    justify-content: center;
    // this is added so that the button doesn't stretch the entire width (default is stretch)
    align-items: flex-start;
    */

    // CSS GRID ALIGNING METHOD
    display: grid;
    align-content: center;
    justify-items: start;

    @media only screen and (max-width: $bp-medium) {
      grid-column: 1 / -1;
      grid-row: 5 / 6;
    }
  }

  &__text {
    font-size: 1.5rem;
    font-style: italic;
    margin-bottom: 4rem;
  }
}
